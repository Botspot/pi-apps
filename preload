#!/bin/bash

#this generates a yad-friendly app list. This is run every time the gui script is executed.
#if this script detects nothing has changed since last run, then it will echo back the app list that was generated last time.

if [ -z "$DIRECTORY" ];then
  DIRECTORY="$(readlink -f "$(dirname "$0")")"
fi

mktimestamps() {
  #these directories are checked for changes
  checkfiles="${DIRECTORY}/apps
${DIRECTORY}/data/settings
${DIRECTORY}/data/status
${DIRECTORY}/etc
${DIRECTORY}/icons/categories
${DIRECTORY}/apps
${DIRECTORY}/preload
${DIRECTORY}/api
${DIRECTORY}/data/category-overrides"
  local IFS=$'\n'
  for i in $checkfiles
  do
    printf "$i $(stat -c %Y "${i}" 2>/dev/null) "
    
    if [ -d "$i" ];then
      find "$i" -type f -printf '%T@ %p\n' | sort -rn | head -n1
    else
      printf '\n'
    fi
  done
}

[ "$1" == source ] && return 0

function error {
  echo -e "\e[91m$1\e[39m" 1>&2
  exit 1
}

#yad or xlunch format
guimode="$1"

if [ -z "$guimode" ];then
  format=yad
elif [[ "$guimode" = xlunch* ]];then
  format=xlunch
elif [[ "$guimode" = yad* ]];then
  format=yad
elif [ "$guimode" != 'yad' ] && [ "$guimode" != 'xlunch' ];then
  error "Unknown list format '$format'!"
fi

#specifies a category to preload (can be left empty to load main page)
prefix="$2"

timestampfile="${DIRECTORY}/data/preload/timestamps-$(echo "$prefix" | tr -d '/')"
listfile="${DIRECTORY}/data/preload/LIST-$(echo "$prefix" | tr -d '/')"

mkdir -p "${DIRECTORY}/data/preload"

reloadlist=0

if [ -f "$timestampfile" ];then
  #get modified timestamps for files/directories in the pi-apps folder
  timestamps="$(mktimestamps)"
  
  if [ "$timestamps" == "$(cat "$timestampfile")" ];then
    #if current timestamps and saved timestamps match, then don't reload the list
    reloadlist=0
    echo "Timestamps match." 1>&2
  else
    #timestamps don't match, so reload the list
    reloadlist=1
    echo "Timestamps don't match" 1>&2
    echo -e "original file: $(cat "$timestampfile")\nnew timestamp: $timestamps" 1>&2
  fi
else
  #timestamp file not found
  reloadlist=1
fi

if [ ! -f "$listfile" ] || [ -z "$(cat "$listfile")" ];then
  echo "list file for $prefix does not exist." 1>&2
  reloadlist=1
fi

#If updates available, show special Updates category (returned separately to avoid re-preloading after update-check finishes)
if [ -z "$prefix" ] && [ "$format" == yad ] && ([ -s "${DIRECTORY}/data/update-status/updatable-files" ] || [ -s "${DIRECTORY}/data/update-status/updatable-apps" ]);then
  #yad format
  echo "${DIRECTORY}/icons/categories/Updates.png
Updates
Updates/
App folder
"
elif [ -z "$prefix" ] && [ "$format" == xlunch ] && ([ -s "${DIRECTORY}/data/update-status/updatable-files" ] || [ -s "${DIRECTORY}/data/update-status/updatable-apps" ]);then
  #xlunch format
  echo "Updates;${DIRECTORY}/icons/categories/Updates-64.png;:exec "\""echo Updates/"\"""
fi

if [ $reloadlist == 1 ];then
  echo "Generating list..." 1>&2
  
  #for app_categories() and app_status() functions
  if ! command -v app_categories >/dev/null ;then
    source "${DIRECTORY}/api"
  fi
  
  if [ ! -z "$prefix" ];then
    echo "Showing apps within $prefix/" 1>&2
    vfiles="$(app_categories | grep . | sort -f | uniq | grep "^$prefix/" | sed "s+$prefix/++g")" #generate a virtual file system with apps in folders represented as subdirectories
  else
    vfiles="$(app_categories | grep . | sort -f | uniq)"
  fi
  
  #remove apps within categories - show this layer of stuff only.
  vfiles="$(sed 's+/.*+/+g' <<<"$vfiles" | sort -f | uniq)"
  
  #get list of apps - excluding folders and apps that are incompatible with CPU architecture
  APPS="$(grep -v '/' <<<"$vfiles" | list_intersect "$(list_apps cpu_installable)")"
  
  #get list of folders - excluding apps - and hide the hidden folder.
  DIRS="$(grep '/' <<<"$vfiles" | tr -d '/' | grep -vFx "hidden")"
  
  #shuffle the list if enabled
  if [ "$(cat "${DIRECTORY}/data/settings/Shuffle App list")" == 'Yes' ];then
    APPS="$(echo "$APPS" | shuf)"
    DIRS="$(echo "$DIRS" | shuf)"
  fi
  
  if [ "$format" == yad ];then
    IFS=$'\n'
    
    #initial value of listfile: if within a prefix, start with a Back button
    if [ ! -z "$prefix" ];then
      echo "${DIRECTORY}/icons/back.png
Back
$(dirname "$prefix" | sed 's+^\.$++g')/
Return to the previous location
" | tee "$listfile"
    else
      echo -n '' > "$listfile"
    fi
    
    for dir in $DIRS
    do
      if [ -f "${DIRECTORY}/icons/categories/${dir}.png" ];then
        diricon="${DIRECTORY}/icons/categories/${dir}.png"
      else
        diricon="${DIRECTORY}/icons/categories/default.png"
      fi
      
      add="$diricon
$dir
$prefix$dir/
App folder
"
      echo "$add"
    done | sed 's/&/&amp;/g' | tee -a "$listfile"
    #finished preloading categories
    
    #preload apps
    for app in $APPS
    do
      #get installation status of app
      status="$(cat "${DIRECTORY}/data/status/${app}" 2>/dev/null)"
      
      #determine app icon
      if [ -f "${DIRECTORY}/apps/${app}/icon-24.png" ];then
        add="${DIRECTORY}/apps/${app}/icon-24.png"$'\n'
      else
        add="${DIRECTORY}/apps/${app}/none-24.png"$'\n'
      fi
      
      #rest of list attributes
      if [ -z "$status" ];then
        add+="$app
$prefix/$app
$(head -n1 "${DIRECTORY}/apps/${app}/description" || echo "Description unavailable")"
      else
        add+="$app
$prefix/$app
"\("$status"\)" $(head -n1 "${DIRECTORY}/apps/${app}/description" || echo "Description unavailable")"
      fi
      
      #determine status text-color for app name (green for installed, red for uninstalled, yellow for corrupted)
      if [ -z "$status" ];then
        add+=$'\n'
      elif [ "$status" == installed ];then
        add+="#00AA00"$'\n'
      elif [ "$status" == uninstalled ];then
        add+="#CC3333"$'\n'
      elif [ "$status" == corrupted ];then
        add+="#888800"$'\n'
      elif [ "$status" == disabled ];then
        add+="#FF0000"$'\n'
      else
        # fallback incase unexpected status
        add+=$'\n'
      fi
      #output finished app lines
      echo "$add"
    done | sed 's/&/&amp;/g' | tee -a "$listfile"
    #finished preloading apps
    
  elif [ "$format" == xlunch ];then
    #XLUNCH list format
    
    #initial value of listfile: if within a prefix, start with a Back button, or if on main page start with Updates
    if [ ! -z "$prefix" ];then
      echo "Back;${DIRECTORY}/icons/back-64.png;:exec echo /" | tee "$listfile"
    else
      echo -n '' > "$listfile"
    fi
    
    IFS=$'\n'
    for dir in $DIRS
    do
      if [ -f "${DIRECTORY}/icons/categories/${dir}-64.png" ];then
        diricon="${DIRECTORY}/icons/categories/${dir}-64.png"
      else
        diricon="${DIRECTORY}/icons/categories/default-64.png"
      fi
      
      echo "${dir};${diricon};:exec echo '${prefix}${dir}/'"
    done | tee -a "$listfile"
    
    for app in $APPS
    do
      if [ -f "${DIRECTORY}/data/status/${app}" ];then
        echo "${app} ($(cat "${DIRECTORY}/data/status/${app}" 2>/dev/null));${DIRECTORY}/apps/${app}/icon-64.png;:exec "\""echo $prefix/${app}"\"""
      else
        #status file missing - app has never been installed
        echo "${app};${DIRECTORY}/apps/${app}/icon-64.png;:exec "\""echo $prefix/${app}"\"""
      fi
    done | tee -a "$listfile"
    
  fi
  
  #save timestamps to file too
  if [ -z "$timestamps" ];then
    timestamps="$(mktimestamps)"
  fi
  echo "$timestamps" > "$timestampfile"
else
  echo "Reading list file..." 1>&2
  cat "$listfile"
fi

#preload all categories in background
"${DIRECTORY}/etc/preload-daemon" "$format" &>/dev/null &
