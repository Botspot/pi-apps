#!/bin/bash

#$1 is the command to be run.
#$2 is the title.
commands="$1"
title="$2"

#set DEBUG variable to 1 to display which terminal is being used
[ -z "$DEBUG" ] && DEBUG=0

#add a line to the terminal's command-to-run that saves the terminal's PID to a known filename
temp_pid_file="$(mktemp -u)"
commands="echo "\$""\$" > $temp_pid_file
$commands"

#reset the GTK theme so terminals follow the system GTK theme
export GTK_THEME=''

function error {
  echo -e "\e[91m$1\e[39m"
  exit 1
}

# Check if the current terminal is in /usr/bin - Wallee
if ! [ -f /usr/bin/$(cat ~/pi-apps/data/settings/Terminal) ];then

  if [ -f /usr/bin/lxterminal ];then
    printf lxterminal > ~/pi-apps/data/settings/Terminal

  elif [ -f /usr/bin/xfce4-terminal ];then
    printf xfce4-terminal > ~/pi-apps/data/settings/Terminal

  elif [ -f /usr/bin/mate-terminal ];then
    printf mate-terminal > ~/pi-apps/data/settings/Terminal

  elif [ -f /usr/bin/xterm ];then
    printf xterm > ~/pi-apps/data/settings/Terminal

  elif [ -f /usr/bin/konsole ];then
    printf konsole > ~/pi-apps/data/settings/Terminal

  elif [ -f /usr/bin/terminator ];then
    printf terminator > ~/pi-apps/data/settings/Terminal

  elif [ -f /usr/bin/gnome-terminal ];then
    printf gnome-terminal > ~/pi-apps/data/settings/Terminal

  elif [ -f /usr/bin/qterminal ];then
    printf qterminal > ~/pi-apps/data/settings/Terminal

  elif [ -f /usr/bin/x-terminal-emulator ];then
    printf x-terminal-emulator > ~/pi-apps/data/settings/Terminal

  else

    echo Failed to locate any terminal emulators!
    exit 1

  fi

fi

if [ "$(cat "${DIRECTORY}/data/settings/Terminal")" == 'lxterminal' ];then
  lxterminal --title="$title" -e bash -c "$commands" &
  [ $DEBUG == 1 ] && echo lxterminal
  
elif [ "$(cat "${DIRECTORY}/data/settings/Terminal")" == 'xfce4-terminal' ];then
  xfce4-terminal --title="$title" -x bash -c "$commands" &
  [ $DEBUG == 1 ] && echo xfce4-terminal
  
elif [ "$(cat "${DIRECTORY}/data/settings/Terminal")" == 'mate-terminal' ];then
  mate-terminal --title="$title" -x bash -c "$commands" &
  [ $DEBUG == 1 ] && echo mate-terminal
  
elif [ "$(cat "${DIRECTORY}/data/settings/Terminal")" == 'xterm' ];then
  xterm -T "$title" -e bash -c "$commands" &
  [ $DEBUG == 1 ] && echo xterm
  
elif [ "$(cat "${DIRECTORY}/data/settings/Terminal")" == 'konsole' ];then
  konsole -p tabtitle="$title" -e bash <(echo "$commands") &
  [ $DEBUG == 1 ] && echo konsole
  
elif [ "$(cat "${DIRECTORY}/data/settings/Terminal")" == 'terminator' ];then
  terminator -T "$title" -x bash -c "$commands" &
  [ $DEBUG == 1 ] && echo terminator
  
elif [ "$(cat "${DIRECTORY}/data/settings/Terminal")" == 'gnome-terminal' ];then
  gnome-terminal --title "$title" -x bash -c "$commands" &
  [ $DEBUG == 1 ] && echo gnome-terminal
  
elif [ "$(cat "${DIRECTORY}/data/settings/Terminal")" == 'qterminal' ];then
  qterminal -e bash <(echo "$commands") &
  [ $DEBUG == 1 ] && echo qterminal
  
elif [ "$(cat "${DIRECTORY}/data/settings/Terminal")" == 'x-terminal-emulator' ];then
  $(readlink -f /usr/bin/x-terminal-emulator) -e bash -c "$commands" &
  [ $DEBUG == 1 ] && echo x-terminal-emulator
  
else
  echo "Terminal emulator not found!"
  exit 1
fi

#A terminal should now be launching and in a few seconds the pid file should appear
if [ ! -z "$temp_pid_file" ];then
  #echo "Waiting for terminal to close..."
  #wait until pid file exists and give up in 5 seconds
  attempts=0
  while [ ! -f "$temp_pid_file" ];do
    
    if [ "$attempts" -gt 5 ];then
      error "terminal-run: No terminal detected as it never created the pid file within 5 seconds."
    fi
    sleep 1
    attempts=$((attempts + 1))
  done #pid file now exists
  terminalrun_pid="$(cat "$temp_pid_file")"
  
  #now, wait until the pid stops (terminal closes)
  while [ -d /proc/${terminalrun_pid} ];do
    sleep 1
  done
  rm -f "$temp_pid_file"
  
fi
