name: Update_Apps

# Controls when the workflow will run
on:
  # run at 00:00 UTC every Wednesday
  schedule:
    - cron: "0 0 * * 3"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update-apps:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Run app update scripts
        run: |
          # print user info
          echo $USER $USERNAME $(id) $(whoami)
          
          #source pi-apps functions

          #export all functions and variables
          set -a
          #make DIRECTORY equal to GITHUB_WORKSPACE, for subscripts and api functions
          DIRECTORY=$GITHUB_WORKSPACE
          source $GITHUB_WORKSPACE/api

          #add special functions
          get_release() {
            curl -s --header "Authorization: token ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" "https://api.github.com/repos/$1/releases/latest" | jq -r '.tag_name' | sed s/v//g
          }

          get_release_raw() {
            curl -s --header "Authorization: token ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" "https://api.github.com/repos/$1/releases/latest" | jq -r '.tag_name'
          }

          get_prerelease() {
            curl -s --header "Authorization: token ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" "https://api.github.com/repos/$1/releases" | jq -r 'map(select(.prerelease)) | first | .tag_name' | sed s/v//g
          }

          get_prerelease_raw() {
            curl -s --header "Authorization: token ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" "https://api.github.com/repos/$1/releases" | jq -r 'map(select(.prerelease)) | first | .tag_name'
          }

          function validate_url(){
            if command wget --timeout=5 -q --spider "$1"; then
              return 0
            else
              return 1
            fi
          }

          #stop exporting functions
          set +a

          #make sure all update scripts are executable
          chmod +x $GITHUB_WORKSPACE/.github/workflows/updates/*.sh
          cd $GITHUB_WORKSPACE
          apps=( .github/workflows/updates/*.sh )
          for app_directory in "${apps[@]}"; do
            echo
            #make sure we are still in the main workspace (incase an update script left off elsewhere)
            cd $GITHUB_WORKSPACE
            export app_name="$(echo ${app_directory%.*} | sed 's:.*/::')"
            echo "$app_name"
            status "Checking $app_name for updates"
            # move to app folder
            cd "$GITHUB_WORKSPACE/apps/$app_name"
            # run app update script
            "$GITHUB_WORKSPACE/$app_directory"
          done
          cd
          if test -f /tmp/updated_apps; then
            sort -u /tmp/updated_apps > /tmp/updated_apps_sorted
            echo "UPDATED_APPS<<EOF" >> $GITHUB_ENV
            cat /tmp/updated_apps_sorted >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

          if test -f /tmp/failed_apps; then
            echo "FAILED_APPS<<EOF" >> $GITHUB_ENV
            cat /tmp/failed_apps | sed '0~1 a\\' >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Test installing updated apps on buster armhf
        uses: theofficialgman/arm-runner-action@v8
        with:
          # this is a buster armhf image
          base_image: https://downloads.raspberrypi.org/raspios_oldstable_armhf/images/raspios_oldstable_armhf-2022-09-26/2022-09-22-raspios-buster-armhf.img.xz
          # bind mount the directory so any changes propogate to outside the chroot
          bind_mount_repository: yes

          # give the image more space
          image_additional_mb: 5000

          # set CPUs to use
          cpu: cortex-a7:cortex-a72

          # user runner name as default path
          copy_repository_path: /home/runner/pi-apps

          # export github env back to outside the chroot
          export_github_env: yes

          import_github_env: true

          # set shell to bash
          shell: /bin/bash
          commands: |
            sudo chown runner:docker /home/runner
            # print user info
            echo $USER $USERNAME $(id) $(whoami)
            sudo bash -c 'echo $USER $USERNAME $(id) $(whoami)'

            # create standard directories
            mkdir -p  $HOME/.local/share/applications $HOME/.local/bin
            sudo mkdir -p /usr/local/bin /usr/local/share/applications

            # install pi-apps dependencies
            sudo apt update
            sudo apt install -y yad curl wget aria2 lsb-release software-properties-common apt-utils imagemagick bc librsvg2-bin locales shellcheck git wmctrl xdotool x11-utils rsync

            # runonce-entries is run in the build tester, runonce requires that all api functions be available to subprocess (like is done in the gui script)
            #for the will_reinstall() and list_intersect() functions
            set -a #make all functions in the api available to subprocesses
            source "${DIRECTORY}/api" || error "failed to source ${DIRECTORY}/api"
            #Run runonce entries
            "${DIRECTORY}/etc/runonce-entries"
            set +a #stop exporting functions

            # upgrade cmake to 3.20+ from theofficialgman ppa to fix QEMU only issue https://gitlab.kitware.com/cmake/cmake/-/issues/20568
            debian_ppa_installer "theofficialgman/cmake-bionic" "bionic" "0ACACB5D1E74E484" || exit 1

            # store apps changed from last commit to working directory in varaible
            mapfile -t changed_apps < <(git diff --name-only | grep ^apps/ | awk -F '/' '{print $2}' | sort -u)

            # clean out any app status files
            rm -rf ./data/status

            # attempt to install updated apps using manage script loop
            # if any app fails, checkout the previous version and add it to the /tmp/failed_update_apps file
            for app in "${changed_apps[@]}"; do
              # skip checking DDNet (due to Rust) if on arm32 under QEMU: https://github.com/rust-lang/cargo/issues/8719
              # skip checking Microsoft PowerShell due to QEMU instability with .NET: https://github.com/Botspot/pi-apps/pull/2252#issuecomment-1403043945
              # skip WPS Office on 32bit as it requires  "64bit" kernel to be detected. QEMU reports an armv7 kernel. WPS Office is still tested on arm64 (which will verify if the deb works and installs correctly)
              skiplist=( "DDNet" "Microsoft PowerShell" "WPS Office" )
              if [[ ! " ${skiplist[*]} " =~ " ${app} " ]]; then
                ./manage install "$app" || { git checkout -- "apps/$app"; echo '> ![badge-error][badge-error]'" Failed to install $app, reverting to previous version." >> /tmp/failed_update_apps; UPDATED_APPS=$(echo "$UPDATED_APPS" | sed "/$app/d"); }
                ./manage uninstall "$app" || { git checkout -- "apps/$app"; echo '> ![badge-error][badge-error]'" Failed to uninstall $app, reverting to previous version." >> /tmp/failed_update_apps; UPDATED_APPS=$(echo "$UPDATED_APPS" | sed "/$app/d"); }
              fi
            done

            if test -f /tmp/failed_update_apps; then
              echo "FAILED_UPDATE_APPS_ARM32<<EOF" >> $GITHUB_ENV
              cat /tmp/failed_update_apps | sed '0~1 a\\' >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
              echo "UPDATED_APPS<<EOF" >> $GITHUB_ENV
              echo "$UPDATED_APPS" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi

      - name: Test installing updated apps on bullseye arm64
        uses: theofficialgman/arm-runner-action@v8
        with:
          # this is a bullseye arm64 image
          base_image: https://downloads.raspberrypi.org/raspios_arm64/images/raspios_arm64-2022-09-26/2022-09-22-raspios-bullseye-arm64.img.xz
          # bind mount the directory so any changes propogate to outside the chroot
          bind_mount_repository: yes

          # give the image more space
          image_additional_mb: 5000

          # set CPUs to use
          cpu: cortex-a7:cortex-a72

          # user runner name as default path
          copy_repository_path: /home/runner/pi-apps

          # export github env back to outside the chroot
          export_github_env: yes

          import_github_env: true

          # set shell to bash
          shell: /bin/bash
          commands: |
            sudo chown runner:docker /home/runner
            # print user info
            echo $USER $USERNAME $(id) $(whoami)
            sudo bash -c 'echo $USER $USERNAME $(id) $(whoami)'

            # create standard directories
            mkdir -p  $HOME/.local/share/applications $HOME/.local/bin
            sudo mkdir -p /usr/local/bin /usr/local/share/applications

            # install pi-apps dependencies
            sudo apt update
            sudo apt install -y yad curl wget aria2 lsb-release software-properties-common apt-utils imagemagick bc librsvg2-bin locales shellcheck git wmctrl xdotool x11-utils rsync

            # runonce-entries is run in the build tester, runonce requires that all api functions be available to subprocess (like is done in the gui script)
            #for the will_reinstall() and list_intersect() functions
            set -a #make all functions in the api available to subprocesses
            source "${DIRECTORY}/api" || error "failed to source ${DIRECTORY}/api"
            #Run runonce entries
            "${DIRECTORY}/etc/runonce-entries"
            set +a #stop exporting functions

            # upgrade cmake to 3.20+ from theofficialgman ppa to fix QEMU only issue https://gitlab.kitware.com/cmake/cmake/-/issues/20568
            debian_ppa_installer "theofficialgman/cmake-bionic" "bionic" "0ACACB5D1E74E484" || exit 1

            # store apps changed from last commit to working directory in varaible
            mapfile -t changed_apps < <(git diff --name-only | grep ^apps/ | awk -F '/' '{print $2}' | sort -u)

            # clean out any app status files
            rm -rf ./data/status

            # attempt to install updated apps using manage script loop
            # if any app fails, checkout the previous version and add it to the /tmp/failed_update_apps file
            for app in "${changed_apps[@]}"; do
              # skip checking Microsoft PowerShell due to QEMU instability with .NET: https://github.com/Botspot/pi-apps/pull/2252#issuecomment-1403043945
              skiplist=( "Microsoft PowerShell" )
              if [[ ! " ${skiplist[*]} " =~ " ${app} " ]]; then
                ./manage install "$app" || { git checkout -- "apps/$app"; echo '> ![badge-error][badge-error]'" Failed to install $app, reverting to previous version." >> /tmp/failed_update_apps; UPDATED_APPS=$(echo "$UPDATED_APPS" | sed "/$app/d"); }
                ./manage uninstall "$app" || { git checkout -- "apps/$app"; echo '> ![badge-error][badge-error]'" Failed to uninstall $app, reverting to previous version." >> /tmp/failed_update_apps; UPDATED_APPS=$(echo "$UPDATED_APPS" | sed "/$app/d"); }
              fi
            done

            if test -f /tmp/failed_update_apps; then
              echo "FAILED_UPDATE_APPS_ARM64<<EOF" >> $GITHUB_ENV
              cat /tmp/failed_update_apps | sed '0~1 a\\' >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
              echo "UPDATED_APPS<<EOF" >> $GITHUB_ENV
              echo "$UPDATED_APPS" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          commit-message: |
            Update App Versions, run by GitHub Actions - Apps updated:

            ${{ env.UPDATED_APPS }}
          branch: "auto-app-updates-NOT-FOR-USERS"
          title: "[AUTO] Update App Versions"
          body: |
            [badge-error]: https://github.com/Pi-Apps-Coders/GitHub-Markdown/blob/main/blockquotes/badge/dark-theme/error.svg?raw=true 'Error'
            [badge-warning]: https://github.com/Pi-Apps-Coders/GitHub-Markdown/blob/main/blockquotes/badge/dark-theme/warning.svg?raw=true 'Warning'
            [badge-issue]: https://github.com/Pi-Apps-Coders/GitHub-Markdown/blob/main/blockquotes/badge/dark-theme/issue.svg?raw=true 'Issue'
            [badge-check]: https://github.com/Pi-Apps-Coders/GitHub-Markdown/blob/main/blockquotes/badge/dark-theme/check.svg?raw=true 'Check'
            [badge-info]: https://github.com/Pi-Apps-Coders/GitHub-Markdown/blob/main/blockquotes/badge/dark-theme/info.svg?raw=true 'Info'
            Automated changes by [create-pull-request](https://github.com/peter-evans/create-pull-request) GitHub action.
            Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Apps updated:
            ```
            ${{ env.UPDATED_APPS }}
            ```
            ${{ env.FAILED_APPS }}
            ${{ env.FAILED_UPDATE_APPS_ARM32 }}
            ${{ env.FAILED_UPDATE_APPS_ARM64 }}
