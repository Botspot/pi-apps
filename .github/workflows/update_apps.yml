name: Update_Apps

# Controls when the workflow will run
on:
  # run at 21:00 UTC every day
  schedule:
     - cron: '0 */6 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update-apps:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Run app update scripts
        run: |
          #source pi-apps functions

          #export all functions and variables
          set -a
          #make DIRECTORY equal to GITHUB_WORKSPACE, for subscripts and api functions
          DIRECTORY=$GITHUB_WORKSPACE
          source $GITHUB_WORKSPACE/api

          #add special functions
          get_release() {
            curl --silent "https://api.github.com/repos/$1/releases/latest" | jq -r '.tag_name' | sed s/v//g
          }

          get_prerelease() {
            curl --silent "https://api.github.com/repos/$1/releases" | jq -r 'map(select(.prerelease)) | first | .tag_name' | sed s/v//g
          }

          function validate_url(){
            if command wget -q --spider "$1"; then
              return 0
            else
              return 1
            fi
          }

          #stop exporting functions
          set +a
          
          #make sure all update scripts are executable
          chmod +x $GITHUB_WORKSPACE/.github/workflows/updates/*.sh
          cd $GITHUB_WORKSPACE
          apps=( .github/workflows/updates/*.sh )
          for app_directory in "${apps[@]}"; do
            echo
            #make sure we are still in the main workspace (incase an update script left off elsewhere)
            cd $GITHUB_WORKSPACE
            export app_name="$(echo ${app_directory%.*} | sed 's:.*/::')"
            echo "$app_name"
            status "Checking $app_name for updates"
            # move to app folder
            cd "$GITHUB_WORKSPACE/apps/$app_name"
            # run app update script
            "$GITHUB_WORKSPACE/$app_directory"
          done
          cd
          if test -f /tmp/updated_apps; then
            sort -u /tmp/updated_apps > /tmp/updated_apps_sorted
            echo "UPDATED_APPS<<EOF" >> $GITHUB_ENV
            cat /tmp/updated_apps_sorted >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
          if test -f /tmp/failed_apps; then
            echo "FAILED_APPS<<EOF" >> $GITHUB_ENV
            cat /tmp/failed_apps | sed '0~1 a\\' >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
          
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          commit-message: |
            Update App Versions, run by GitHub Actions - Apps updated:

            ${{ env.UPDATED_APPS }}
          branch: "auto-app-updates-NOT-FOR-USERS"
          title: "[AUTO] Update App Versions"
          body: |
            Automated changes by [create-pull-request](https://github.com/peter-evans/create-pull-request) GitHub action.
            Workflow run: https://github.com/Botspot/pi-apps/actions/runs/${{ github.run_id }}
            Apps updated:

            ${{ env.UPDATED_APPS }}

            ${{ env.FAILED_APPS }}
            
