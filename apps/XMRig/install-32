#!/bin/bash
version=6.16.2

# userinput function to display yad prompts to the user
function userinput_func {
    unset uniq_selection
    height=$(($(echo "$1" | grep -o '\\n' | wc -l) + 8))
    height_gui=$(echo $((height * 15 + ${#@} * 20 + 100)))
    height_gui_buttons=$(echo $((height * 15)))
    if [[ "${#@}" == "2" ]]; then
        echo -e "$1" | yad --fixed --no-escape --undecorated --show-uri --center --image "dialog-information" --borders="20" --title "User Info Prompt" \
            --text-info --fontname="@font@ 11" --wrap --width=800 --height=$height_gui --window-icon="${DIRECTORY}/apps/XMRig/icon-64.png" \
            --show-uri \
            --button="$2":0
        output="$2"
    elif [[ "${#@}" == "3" ]]; then
        yad --image "dialog-question" \
            --borders="20" --height=$height_gui_buttons --center --fixed --window-icon=${DIRECTORY}/apps/XMRig/icon-64.png \
            --text="$1" \
            --button="$2":0 \
            --button="$3":1
        if [[ $? -ne 0 ]]; then
            output="$3"
        else
            output="$2"
        fi
    else
        for string in "${@:2}"; do
            uniq_selection+=(FALSE "$string")
        done
        uniq_selection[0]=TRUE
        output=$(
            yad --no-escape --undecorated --center \
                --borders="20" --height=$height_gui --window-icon="${DIRECTORY}/apps/XMRig/icon-64.png" \
                --text "$1" \
                --list \
                --no-headers \
                --radiolist \
                --center \
                --fixed \
                --column "" \
                --column "Selection" \
                --print-column=2 \
                --separator='' \
                --button="Ok":0 \
                "${uniq_selection[@]}"
        )
    fi
}

function userinput_text_func {
    yad --window-icon="${DIRECTORY}/apps/XMRig/icon-64.png" --center --wrap --text "$1" --entry --button="Ok":0
}

default_table=("Yes" "No")

function enable_64bit() {
    if [ -f /boot/config.txt ]; then
        echo "arm_64bit=1" | sudo tee --append /boot/config.txt 1>&2 || error 'Failed to append '\''arm_64bit=1'\'' to /boot/config.txt!'
        echo -e "The 64-bit kernel has been enabled by adding 'arm_64bit=1' to /boot/config.txt\nPlease reboot and install the XMRig app again. Press CTRL+C to exit."
        sleep infinity
    else
        error 'I was not able to detect /boot/config.txt! Something is very wrong!'
    fi
}

function config_helper() {
    # Set mining pool

    check=0
    until [ "$check" == "1" ]; do
        pool_pref=$(userinput_text_func "What mining pool do you want to use?  Example: gulf.moneroocean.stream:10032")
        table=("Yes" "No")
        userinput_func "Your mining pool will be set to ${pool_pref}. Is this ok?" "${default_table[@]}"
        case $output in
        Yes)
            check=1
            status_green "Your pool is now set to ${pool_pref}. You can change this by editing the '\"url\":' field in '$HOME/.config/xmrig.json.'."
            ;;
        No) check=0 ;;
        *)
            check=0
            echo 'Invalid input! Please answer y/n, or yes/no.'
            ;;
        esac
    done

    # Set SSL/TLS options

    userinput_func "Does your mining pool support SSL/TLS? If you don't know what this is, just say no." "${default_table[@]}"
    case $output in
    Yes)
        tls="true"
        status_green "Your config now has SSL/TLS enabled. You can change this by editing the '\"tls\":' field in '$HOME/.config/xmrig.json.'."
        ;;
    *) tls="false" ;;
    esac

    # Set keepalive options

    userinput_func "Does your mining pool support keepalived packets? If you don't know what this is, just say no." "${default_table[@]}"
    case $output in
    Yes)
        keepalived="true"
        status_green "Your config now has keepalived packets enabled. You can change this by editing the '\"keepalive\":' field in '$HOME/.config/xmrig.json'."
        ;;
    *) keepalived="false" ;;
    esac

    # Set Wallet Address

    check=0
    until [ "$check" == "1" ]; do
        wallet_address=$(userinput_text_func "What is your Wallet Address? This will only be used in $HOME/xmrig/bullseye/root/.config/xmrig.json.")
        userinput_func "Your Wallet Address will be set to $wallet_address. Is this ok?" "${default_table[@]}"
        case $output in
        Yes)
            check=1
            status_green "Your Wallet Address is now set to ${wallet_address}. You can change this by editing the '\"user\":' field in '$HOME/.config/xmrig.json'."
            ;;
        No) check=0 ;;
        *)
            check=0
            echo 'Invalid input! Please answer y/n, or yes/no.'
            ;;
        esac
    done

    # Set miner name

    check=0
    userinput_func "Do you want to name your Miner?" "${default_table[@]}"
    if [ "$output" == "Yes" ]; then
        until [ "$check" == "1" ]; do
            miner_name=$(userinput_text_func "What to you want to name your Miner?")
            userinput_func "Your Miner's name will be ${miner_name}. Is this ok?" "${default_table[@]}"
            case $output in
            Yes)
                check=1
                status_green "Your Miner's name is now set to ${miner_name}. You can change this by editing the '\"rig-id\":' field in '$HOME/.config/xmrig.json'."
                ;;
            No) check=0 ;;
            *)
                check=0
                echo 'Invalid input! Please answer y/n, or yes/no.'
                ;;
            esac
        done
    else
        status "You chose not to name your Miner. If you change your mind, you can edit the '\"rig-id\":' line in '$HOME/.config/xmrig.json'. Continuing..."
    fi
    # copy the settings to xmrig.json

    cat <<EOT | tee $HOME/xmrig/xmrig.json 1>&2 || error 'Failed to create $HOME/xmrig/xmrig.json!'
{
    "autosave": true,
    "cpu": true,
    "opencl": false,
    "cuda": false,
    "pools": [
        {
            "url": "${pool_pref}",
            "user": "${wallet_address}",
            "rig-id": "${miner_name}",
            "keepalive": ${keepalived},
            "tls": ${tls}
        }
    ]
}
EOT
    sudo cp $HOME/xmrig/xmrig.json $chroot_dir/root/.config/xmrig.json error "Failed to copy 'xmrig.json' to '$HOME/.config/xmrig.json'!"
    # Create xmrig command in host

    cat <<EOT | sudo tee /usr/bin/xmrig 1>&2 || error 'Failed to make xmrig command in /usr/local/bin/xmrig!'
#!/bin/bash

sudo chroot $HOME/xmrig/bullseye xmrig
EOT
    sudo chmod 775 /usr/bin/xmrig || error 'Failed to make "/usr/bin/xmrig" executable!'
    status_green 'Done!'

} # End config_helper()

# Hardware and kernel checks

if grep -q ARMv6 /proc/cpuinfo; then
    error "XMRig is not compatible with the Raspberry Pi Zero or other ARMv6 boards."
fi

if [ "$(uname -m)" != "aarch64" ] && [ "$(uname -m)" != "arm64" ]; then
    check=0
    while [ "$check" == "0" ]; do
        userinput_func "A 64-bit kernel is REQUIRED install XMRig. Do you want me to enable 64-bit kernel?" "${default_table[@]}"
        case $output in
        Yes)
            check=1
            enable_64bit
            ;;
        No)
            check=1
            error "User error: 64-bit kernel is required but user chose to not enable it."
            ;;
        *)
            check=0
            echo 'Invalid input! Please answer y/n, or yes/no.'
            ;;
        esac
    done
elif [ "$(uname -m)" == "arm64" ] || [ "$(uname -m)" == "aarch64" ]; then
    status 'You have a 64-bit kernel. Continuing...'
fi
# Setup chroot

chroot_dir="$HOME/xmrig/bullseye"
install_packages debootstrap || exit 1
check=0
if [ -d "$HOME/xmrig" ]; then
    until [ "$check" == "1" ]; do
        table=("Delete" "Reuse" "More Info")
        userinput_func "I tried to debootstrap '$chroot_dir', but '$HOME/xmrig' exists. Do you want to delete the chroot, or reuse it? If you have a 'xmrig.json' config file, it will be saved." "${table[@]}"
        case "$output" in
        Delete)
            if [ -e "$HOME/xmrig/xmrig.json" ]; then 
                status 'Creating backup of '\''$HOME/xmrig/xmrig.json'\'' to $HOME/xmrig.json.bak...'
                cp $HOME/xmrig/xmrig.json $HOME/xmrig.json.bak 1>&2 || sudo cp $HOME/xmrig/xmrig.json $HOME/xmrig.json.bak || error 'Failed to create a backup of '\''$HOME/xmrig/xmrig.json'\''!'
                status_green 'Done!'
            else
                warning "No 'xmrig.json' found! Not backing up... Continuing in ten seconds..."; sleep 10
            fi
            status "Removing '$HOME/xmrig'..."
            sudo rm -rf $HOME/xmrig || error 'I was not able to remove '\''$HOME/xmrig'\''!'
            status_green 'Done!'
            status 'Creating new '\''$HOME/xmrig'\'' directory...'
            mkdir -p $HOME/xmrig/ || error 'I was not able to create '\''$HOME/xmrig'\''!'
            status_green 'Done!'
            status 'Starting debootstrap... This next part will take a while.\n'
            sudo debootstrap --variant=buildd --arch arm64 bullseye $HOME/xmrig/bullseye http://ftp.us.debian.org/debian/ || error 'Failed to debootstrap chroot environment!!!'
            status_green '\nDone!\n'
            check=1
            ;;
        Reuse)
            status 'Your current chroot will be used. Continuing...'
            check=1
            ;;
        "More Info")
            status "\nIf you select delete, the XMRig chroot directory ($chroot_dir) will be removed, a new arm64 chroot created, and XMRig will be compiled and installed into it.\nThe whole install process (if delete is selected) will probably take around an hour, depending on your hardware.\nIf you select reuse, the same chroot will be used (the '$chroot_dir/xmrig' directory will still be removed, though, so if you have any important files in there, copy them out), and a new copy of XMRig compiled and installed. Your config (if you have one) will be saved.\nThis will take much less time.\nNote: if XMRig is being reinstalled from an update, you might miss some of it if you choose to reuse the chroot.\n"
            check=0
            ;;
        *)
            echo -e "\n\e[91mInvalid answer! Please choose 'd', 'r', or 'm'.\e[0m\n"
            check=0
            ;;
        esac
    done
fi
sudo mkdir -p $chroot_dir/home/$USER/ $chroot_dir/root/.config || error 'Failed to create folders in chroot!'
sudo cp /etc/resolv.conf $chroot_dir/etc/resolv.conf || error 'Failed to copy '\''/etc/resolv.conf'\'' into chroot environment!'
echo "export LANG=C" | sudo tee --append $HOME/xmrig/bullseye/etc/.bashrc 1>&2 || error 'Failed to echo '\''export LANG=C'\'' to chroot environment\''s .bashrc'

status 'Generating chroot XMRig install script...'
sudo rm $chroot_dir/chroot-xmrig-inst.sh &>/dev/null && sudo touch $chroot_dir/chroot-xmrig-inst.sh
# Start xmrig install script
sudo cat <<EOT | sudo tee $chroot_dir/chroot-xmrig-inst.sh 1>&2 || error 'Failed to create XMRig install script!'
#!/bin/bash
version=$version
apt-get update
#install xmrig
error() { #red text and exit 1
  echo -e "\e[91m$1\e[0m" 1>&2
  exit 1
}


apt install git build-essential cmake make libuv1-dev libssl-dev libhwloc-dev -y
if [ "$?" != "0" ]; then
error 'Failed to install dependecies!'
fi
rm -rf /xmrig || error "Failed to remove '/xmrig' directory!"
git clone --branch v$version https://github.com/xmrig/xmrig || error 'Failed to clone repository!'
mkdir /xmrig/build && cd /xmrig/build || error 'Failed to create and cd into build directory!'
cmake .. || error 'Failed to generate build files!'
make -j$(nproc) || error 'Failed to build XMRig!'
cp xmrig /usr/bin/xmrig || error 'Failed to copy xmrig onto PATH!'
EOT
sudo chmod 775 $chroot_dir/chroot-xmrig-inst.sh || error 'Failed to make '\''$chroot_dir/chroot-xmrig-inst.sh'\'' executable!'
status_green 'Done.'

# Run install script
sudo chroot $HOME/xmrig/bullseye ./chroot-xmrig-inst.sh || error 'Failed to build XMRig inside chroot!!!'

if [ -e $HOME/xmrig.json.bak ]; then
    userinput_func "Do you want to use your previous 'xmrig.json'?" $default_table
    if [ "$output" == "Yes" ]; then
        status "\nCopying old 'xmrig.json' to chroot..."
        cp $HOME/xmrig.json.bak $HOME/xmrig/xmrig.json
        sudo cp $HOME/xmrig.json.bak $HOME/xmrig/bullseye/root/.config/xmrig.json
        rm $HOME/xmrig.json.bak
    else
        status '\nI won'\''t use the previous config...'
        use_old_config="no"
    fi
elif [ "$use_old_config" == "no" ] || [ ! -e $HOME/xmrig.json.bak ]; then
    userinput_func "Do you want to setup your xmrig.json? This will make running xmrig easier." $default_table
    if [ "$output" == "Yes" ]; then
        status_green "\nStarting helper..."
        config_helper
    else
        status '\nI won'\''t run the config helper...'
    fi
fi
# Make the xmrig-chroot command

status '\nMaking xmrig-chroot command...'
cat <<EOT | sudo tee /usr/bin/xmrig-chroot 1>&2 || error 'Failed to make xmrig-chroot command in /usr/bin/xmrig-chroot!'
#!/bin/bash
sudo chroot $HOME/xmrig/bullseye
EOT
sudo chmod 775 /usr/bin/xmrig-chroot || error 'Failed to make "/usr/bin/xmrig-chroot" executable!'
status_green "\nAll done!"
status "\n\nIf you chose to run the config helper, you can now run XMRig by running 'xmrig' in from your Terminal.\nDoing this will run 'sudo chroot $HOME/xmrig/bullseye xmrig', and try to run XMRig with '$chroot_dir/root/xmrig.json'. If you did not setup the config file, you can run xmrig like this:\n1. Run 'xmrig-chroot'.\n2. Now that you're inside the chroot, you can just run 'xmrig' with all the flags and arguments you want, or setup a more complex '$chroot_dir/root/.config/xmrig.json'! Have fun!"
