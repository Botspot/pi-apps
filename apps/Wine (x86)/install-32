#!/bin/bash
if grep -q ARMv7 /proc/cpuinfo ;then
  hardware='pi3'
elif grep -q ARMv6 /proc/cpuinfo ;then
  hardware='pi0'
  error "Wine is not compatible with the Raspberry Pi Zero or other ARMv6 boards."
else
  hardware='pi4'
fi

if [ ! -e /proc/config.gz ];then
  sudo modprobe configs || exit 1
  if [ ! -e /proc/config.gz ];then
    error "/proc/config.gz does not exist after running sudo modprobe configs!"
  fi
fi

vmsplit_output="$(gunzip < /proc/config.gz | grep VMSPLIT)"
if [ -z "$vmsplit_output" ];then
  kernel="$(uname -m)"
  if [ $kernel == aarch64 ];then
    echo "No memory split information due to running a 64-bit kernel. Continuing..."
  else
    echo "No memory split information and not running a 64-bit kernel. Strange."
    sleep 2
    echo "Continuing..."
  fi
elif echo "$vmsplit_output" | grep -q "^CONFIG_VMSPLIT_2G=y" || echo "$vmsplit_output" | grep -q "^# CONFIG_VMSPLIT_3G is not set" ;then
  
  #ensure hardware is armv7 for kernel compiling to work
  if [ "$hardware" != 'pi3' ];then
    error "User error: This script is not capable of handling your $hardware board with a 2G/2G memory split.\nWhatever you did to get yourself into this situation, undo it and try installing Wine again."
  #ensure /boot/config.txt exists to make sure this is a rpi board
  elif [ ! -f /boot/config.txt ];then
    error "User error: Your system is not currently compatible with Wine. It needs a kernel with 3G/1G memory split. This is easy to do: switch to the 64-bit kernel by adding a line to /boot/config.txt. However, that file does not exist. Most likely you are trying to use Pi-Apps on an unsupported device or operating system."
  fi
  
  #continue asking until valid answer
  while true;do
    echo -e "You are using a kernel with a 2G/2G memory split.\nWine will not work on such systems. What would you like to do?
1. Switch to the 64-bit kernel (about 2 minutes)
2. Compile a 3G/1G kernel (several hours)
3. Install a precompiled 3G/1G kernel (about 2 minutes but might be outdated)
4. Exit"
    read -n1 answer
    echo ''
    if [ "$answer" == 1 ];then
      #switch to 64bit kernel
      
      echo "arm_64bit=1" | sudo tee --append /boot/config.txt >/dev/null
      echo -e "The 64-bit kernel has been enabled by adding 'arm_64bit=1' to /boot/config.txt\nPlease reboot and install the Wine app again."
      sleep infinity
    elif [ "$answer" == 2 ];then
      #compile 3g/1g kernel
      
      #backup ~/linux if it exists
      rm -rf ~/linux.bak
      [ -e ~/linux ] && (echo "$HOME/linux already exists, moving it to $HOME/linux.bak" ; mv -f ~/linux ~/linux.bak)
      
      #download kernel source code
      git_clone --depth=1 https://github.com/raspberrypi/linux || error "Failed to git_clone the raspberry pi kernel repo!"
      
      echo "Installing necessary build packages..."
      install_packages raspberrypi-kernel-headers build-essential bc git wget bison flex libssl-dev make libncurses-dev || exit 1
      
      #build for pi3
      cd ~/linux || error "Failed to enter the ~/linux folder!"
      KERNEL=kernel7
      make -j8 bcm2709_defconfig || error "The make command exited with failure. Full command: 'make -j8 bcm2709_defconfig'"
      
      #change memory split config
      echo "Setting memory split to 3G/1G"
      sed -i 's/CONFIG_VMSPLIT_2G=y/# CONFIG_VMSPLIT_2G is not set/g' ~/linux/.config || error "sed failed to edit $HOME/linux/.config file!"
      sed -i 's/# CONFIG_VMSPLIT_3G is not set/CONFIG_VMSPLIT_3G=1/g' ~/linux/.config
      
      echo '' | make -j8 zImage modules dtbs || error "Failed to make bcm2709_defconfig zImage modules dtbs!"
      
      #install
      echo "Copying new files to /boot/..."
      sudo make modules_install || error "sudo make modules_install failed!"
      sudo cp arch/arm/boot/dts/*.dtb /boot/ || error "Failed to copy dtb files to /boot!"
      sudo cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/ || error "Failed to copy overlays to /boot/overlays!"
      sudo cp arch/arm/boot/dts/overlays/README /boot/overlays/
      sudo cp arch/arm/boot/zImage /boot/$KERNEL.img || error "Failed to copy kernel to /boot/$KERNEL.img!"
      cd
      rm -rf ~/linux
      
      echo "Removing the utilities that were used to compile the kernel..."
      purge_packages
      
      #message
      echo -e "It appears the 3G/1G kernel has been built and installed successfully.\nPlease reboot and install the Wine app again."
      sleep infinity
    elif [ "$answer" == 3 ];then 
      #install precompiled 3g/1g kernel
      
      #backup ~/linux if it exists
      rm -rf ~/linux.bak
      [ -e ~/linux ] && (echo "$HOME/linux already exists, moving it to $HOME/linux.bak" ; mv -f ~/linux ~/linux.bak)
      #download precompiled kernel
      cd $HOME
      echo "Downloading precompiled kernel..."
      wget https://github.com/Itai-Nelken/RPi-3g-1g-kernel-wine/releases/download/5/rpi23_3g1g_kernel.zip -O ~/3g1g-rpi-kernel.zip || error "Failed to download prebuilt kernel!"
      #extract precompiled kernel
      echo "Extracting prebuilt kernel..."
      sleep 0.5 # so user has time to read what is happening
      unzip ~/3g1g-rpi-kernel.zip || error "Failed to extract kernel!"
      cd linux || error "Failed to change folder to ~/linux!"
      #install the precompiled kernel
      export KERNEL=kernel7
      sudo make modules_install || error "sudo make modules_install failed!"
      sudo cp arch/arm/boot/dts/*.dtb /boot/ || error "Failed to copy dtb files to /boot!"
      sudo cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/ || error "Failed to copy overlays to /boot/overlays!"
      sudo cp arch/arm/boot/dts/overlays/README /boot/overlays/
      sudo cp arch/arm/boot/zImage /boot/$KERNEL.img || error "Failed to copy kernel to /boot/$KERNEL.img!"
      cd
      rm -rf linux ~/3g1g-rpi-kernel.zip
      #message
      echo -e "\e[1mIt appears the precompiled 3G/1G kernel has been installed successfully.\nPlease reboot and install the Wine app again.\e[0m"
      sleep infinity
    elif [ "$answer" == 4 ];then
      echo "User error: exited."
      exit 1
    else
      echo "Invalid response. Must be '1', '2', '3' or '4'."
    fi
  done
else
  echo "Your system is using a 3G/1G kernel. Continuing..."
fi
#Past this point, the pi is running a Wine-compatible kernel.

#install box86
"${DIRECTORY}/manage" install-if-not-installed Box86 || error "Box86 failed to install somehow!"
if ! command -v box86 >/dev/null ;then
  error "User error: Pi-Apps thinks Box86 is installed, however no command named 'box86' exists. Please install Box86 manually."
fi
echo "Installed Box86 version:"
box86 -v || error "User error: Something went wrong when trying to run Box86."

# Remove old wine, while leaving config intact
pkill -9 wine
command -v wineserver >/dev/null && wineserver -k
command -v wine >/dev/null && sudo apt purge -y wine &>/dev/null &
sudo rm -rf /usr/local/bin/wine /usr/local/bin/wineboot /usr/local/bin/wineserver /usr/local/bin/winecfg /usr/local/bin/winetricks ~/wine.tgz /opt/wine ~/.cache/winetricks ~/.cache/wine 2>/dev/null

# Get dependencies
install_packages cabextract p7zip-full || exit 1
# Download wine to /opt
wget https://github.com/phoenixbyrd/TwisterOS/raw/master/wine.tgz -O /tmp/wine.tgz || error 'Failed to download wine!'
sudo tar zxf /tmp/wine.tgz -C /opt --no-same-owner || error 'Failed to extract wine!' #use the --no-same-owner flag, because we want the folder's owner to be root, not hardcoded as pi.
rm -f /tmp/wine.tgz
[ ! -f /opt/wine/bin/wine ] && error "The wine.tgz extraction succeeded, but the file '/opt/wine/bin/wine' is missing!"

#download winetricks
wget -O /tmp/winetricks "https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks" || exit 1
sudo mv /tmp/winetricks /opt/wine/bin/winetricks || error "Failed to move winetricks script to /opt/wine/bin folder!"
sudo chmod +x /opt/wine/bin/winetricks

#download Mono to universal location (to be installed automatically in all wine prefixes)
#according to https://wiki.winehq.org/Mono#Versions, use Mono 5.1.0 for Wine 5.13
sudo mkdir -p /opt/wine/mono
wget -O "/tmp/wine-mono-5.1.0-x86.msi" 'https://dl.winehq.org/wine/wine-mono/5.1.0/wine-mono-5.1.0-x86.msi' || exit 1
sudo mv "/tmp/wine-mono-5.1.0-x86.msi" "/opt/wine/mono/wine-mono-5.1.0-x86.msi" || exit 1

#download Gecko to universal location (to be installed automatically in all wine prefixes)
#according to https://wiki.winehq.org/Gecko, use Gecko 2.47.1 for Wine 5.13
sudo mkdir -p /opt/wine/gecko
wget -O "/tmp/wine-gecko-2.47.1-x86.msi" 'https://dl.winehq.org/wine/wine-gecko/2.47.1/wine-gecko-2.47.1-x86.msi' || exit 1
sudo mv "/tmp/wine-gecko-2.47.1-x86.msi" "/opt/wine/gecko/wine-gecko-2.47.1-x86.msi" || exit 1

status "Creating terminal commands:"
echo "  - winecfg"
sudo ln -s /opt/wine/bin/winecfg /usr/local/bin/winecfg
echo "  - wineserver"
sudo ln -s /opt/wine/bin/wineserver /usr/local/bin/wineserver
echo "  - wineboot"
sudo ln -s /opt/wine/bin/wineboot /usr/local/bin/wineboot

echo "  - wine"
echo "#!/bin/bash
if [ -d /opt/wine/mesa ];then
  export LD_LIBRARY_PATH=/opt/wine/mesa/lib/arm-linux-gnueabihf/
  export LIBGL_DRIVERS_PATH=/opt/wine/mesa/lib/arm-linux-gnueabihf/dri/
  export VK_ICD_FILENAMES=/opt/wine/mesa/share/vulkan/icd.d/broadcom_icd.armv7l.json
fi
/opt/wine/bin/wine"' "$@"' | sudo tee /usr/local/bin/wine >/dev/null

echo "  - winetricks"
echo "#!/bin/bash
BOX86_NOBANNER=1 /opt/wine/bin/winetricks"' "$@"' | sudo tee /usr/local/bin/winetricks >/dev/null

#make them all executable
status -n "Making executable... "
sudo chmod +x /usr/local/bin/winecfg /usr/local/bin/wineserver /usr/local/bin/wineboot /usr/local/bin/wine /usr/local/bin/winetricks || error "\nFailed to mark all commands as executable. Most likely one failed to be generated or copied. These files are:\n/usr/local/bin/winecfg\n/usr/local/bin/wineserver\n/usr/local/bin/wineboot\n/usr/local/bin/wine\n/usr/local/bin/winetricks"
status_green "Done"
echo

#get mesa and icons from wine-stuff repo
cd /tmp
rm -rf "$PWD/wine-stuff"
git clone https://github.com/Botspot/wine-stuff || error "Failed to clone wine-stuff repository!"
sudo mv "$PWD/wine-stuff/icons" /opt/wine
if [ $(ldd --version | head -n1 | awk '{print $NF}' | sed 's/\..*//g') -ge 2 ] && [ "$(ldd --version | head -n1 | awk '{print $NF}' | sed 's/.*\.//g')" -ge 30 ];then
  #only install mesa if glibc is 2.30 or greater
  sudo mv "$PWD/wine-stuff/mesa" /opt/wine
fi
rm -rf "$PWD/wine-stuff"
cd

#create menu launchers
status -n "Creating Menu launchers... "
echo "[Desktop Entry]
StartupNotify=true
Terminal=false
Type=Application
Name=Wine Configuration
Exec=wine winecfg
Icon=/opt/wine/icons/winecfg.png
Categories=System;
Comment=Configure wine" > ~/.local/share/applications/wine-config.desktop

echo "[Desktop Entry]
Name=Winetricks
Comment=Work around problems and install applications under Wine
Exec=bash -c 'BOX86_NOBANNER=1 box86 winetricks --gui'
Terminal=false
Icon=/opt/wine/icons/winetricks.png
Type=Application
Categories=System;" > ~/.local/share/applications/wine-tricks.desktop

echo "[Desktop Entry]
Version=1.0
Type=Application
Name=Wine Desktop
Comment=Wine graphical desktop environment to mimic a Windows OS
Icon=/opt/wine/icons/wine-desktop.png
Exec=wine explorer /desktop=shell,1280x720
Terminal=false
Categories=System;" > ~/.local/share/applications/wine-explorer.desktop

echo "[Desktop Entry]
Version=1.0
Type=Application
Name=Wine Program Manager
Comment=Install/Remove Windows programs
Icon=/opt/wine/icons/wine-program-manager.png
Exec=wine uninstaller
Terminal=false
Categories=System;" > ~/.local/share/applications/wine-uninstaller.desktop

echo "[Desktop Entry]
Version=1.0
Type=Application
Name=Wine Task Manager
Comment=View running processes within Wine
Icon=/opt/wine/icons/winetask.png
Exec=wine taskmgr
Terminal=false
Categories=System;" > ~/.local/share/applications/wine-taskmgr.desktop

echo "[Desktop Entry]
StartupNotify=false
Version=1.0
Type=Application
Name=Wine Killer
Comment=Terminate any running Wine processes
Icon=/opt/wine/icons/winestop.png
Exec=wineserver -k
Terminal=false
Categories=System;" > ~/.local/share/applications/wine-killer.desktop

echo "[Desktop Entry]
Version=1.0
Type=Application
Name=Wine Reset
Comment=Clean out the default Wine prefix and start over
Icon=/opt/wine/icons/wine-regenerate.png
Exec=bash -c "\""yad --window-icon=/opt/wine/icons/wine-regenerate.png --title='Wine Reset' --text='Are you sure you want to DELETE all data and applications in your Wine prefix and start over?' --center --button=Cancel:1 --button=Yes:0 --on-top && ${DIRECTORY}/etc/terminal-run 'set -x ; echo y | winetricks annihilate -q ; wine wineboot ; W_OPT_UNATTENDED=1 winetricks mfc42 vcrun6 vcrun2003 xact d3drm d3dx9_43 d3dcompiler_43 d3dx9 ; wine wineboot -u' 'Generating Wine prefix...'"\""
Terminal=false
Categories=System;" > ~/.local/share/applications/wine-regenerate.desktop
status_green "Done"

echo
if [ -e "$HOME/.wine" ];then
  status "Checking Wine prefix..."
else
  status "Generating Wine prefix..."
fi
sleep 5

# Boot wine (make fresh wineprefix in ~/.wine
export BOX86_NOBANNER=1 #hide box86 output (for cosmetics)
export WINEARCH=win32 #Make sure Wine creates a 32-bit prefix
#export WINEDLLOVERRIDES="mscoree,mshtml=" #Avoid asking user to install gecko or mono
wine wineboot #this won't display any dialog boxes that require a button to be clicked
#wait until above process exits
sleep 2
while [ ! -z "$(pgrep -i 'wine C:')" ];do
  sleep 1
done

#enable font smoothing - see https://askubuntu.com/a/219795
status "Enabling font smoothing..."
TMPFILE=$(mktemp) || exit 1

MODE=2 # 0 = disabled; 2 = enabled
TYPE=2 # 1 = regular;  2 = subpixel
ORIENTATION=1 # 0 = BGR; 1 = RGB

echo "REGEDIT4

[HKEY_CURRENT_USER\Control Panel\Desktop]
\"FontSmoothing\"=\"$MODE\"
\"FontSmoothingOrientation\"=dword:0000000$ORIENTATION
\"FontSmoothingType\"=dword:0000000$TYPE
\"FontSmoothingGamma\"=dword:00000578" > $TMPFILE

wine regedit $TMPFILE

rm -f $TMPFILE

#install some packages with winetricks for a better out-of-the-box experience
export W_OPT_UNATTENDED=1 #Avoid opening any dialog windows; install everything in unattended mode
for i in mfc42 vcrun6 vcrun2003 xact d3drm d3dx9_43 d3dcompiler_43 d3dx9 ;do
  echo
  status "Installing $i with winetricks..."
  winetricks $i
done
status "Winetricks finished"

#update the wine prefix (~/.wine) to fix the issue that causes wine to not know its system drive
wine wineboot -u
#wait until above process exits
sleep 2
while [ ! -z "$(pgrep -i 'wine C:')" ];do
  sleep 1
done

exit 0

